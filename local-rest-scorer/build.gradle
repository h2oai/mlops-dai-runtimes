plugins {
    id 'com.google.cloud.tools.jib'
    id 'org.springframework.boot'
}
apply from: project(":").file('gradle/java.gradle')

dependencies {
    runtimeOnly    group: 'org.springframework.boot', name: 'spring-boot-properties-migrator'
    implementation project(':common:rest-spring-api')
    implementation project(':common:transform')
    implementation group: 'ai.h2o', name: 'h2o-genmodel'
    implementation group: 'ai.h2o', name: 'h2o-genmodel-ext-xgboost'
    implementation group: 'ai.h2o', name: 'mojo2-runtime-api'
    implementation group: 'ai.h2o', name: 'mojo2-runtime-h2o3-impl'
    implementation group: 'ai.h2o', name: 'mojo2-runtime-impl'
    implementation group: 'io.springfox', name: 'springfox-boot-starter', version: springFoxVersion
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-tomcat'

    implementation group: 'com.google.guava', name: 'guava', version: guavaVersion
    implementation group: 'jakarta.servlet', name: 'jakarta.servlet-api'

    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    testImplementation group: 'com.google.truth.extensions', name: 'truth-java8-extension'
    testImplementation group: 'org.mockito', name: 'mockito-inline', version: mockitoInlineVersion
    testImplementation group: 'org.mockito', name : 'mockito-core', version: mockitoVersion
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: jupiterVersion
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: jupiterVersion
    testImplementation group: 'org.junit-pioneer', name: 'junit-pioneer', version: jupiterPioneerVersion
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: jupiterVersion
}

test {
    useJUnitPlatform()

    jvmArgs '--add-opens=java.base/java.util=ALL-UNNAMED'
    jvmArgs '--add-opens=java.base/java.lang=ALL-UNNAMED'
}

bootRun {
    systemProperties System.properties
}

bootJar {
    mainClass = 'ai.h2o.mojos.deploy.local.rest.ScorerApplication'
    archiveClassifier = 'boot'
}

jar {
    enabled = true
}

// Include the local rest scorer executable jar in the root package distribution zip file.
rootProject.distributionZip {
    dependsOn bootJar
    into(this.project.path.replace(":", "/")) {
        from bootJar.archivePath
    }
}

// Docker image configuration.
jib {
    from {
        image = javaBaseImage
    }
    to {
        image = dockerRepositoryPrefix + 'rest-scorer'
        tags = [version]
        auth {
            username = System.getenv('TO_DOCKER_USERNAME') ?: ''
            password = System.getenv('TO_DOCKER_PASSWORD') ?: ''
        }
    }
    container {
        jvmFlags = defaultJibContainerJvmFlags.split(" ").each { it.trim() }
        ports = ['8080']
        volumes = [
                // For storing the mojo2 file with the model to be used for scoring.
                '/mojos',
                // For the DAI license file.
                '/secrets',
        ]
        environment = [
                // The expected path to the DAI license file.
                DRIVERLESS_AI_LICENSE_FILE: '/secrets/license.sig',
        ]
    }
}

// Make docker TAR build part of the build task to ensure the image can be built.
// No pushing anywhere (not even to local docker). To push to local docker run task `jibDockerBuild` instead.
// To push to harbor use task `jib`, credentials will be needed though.
tasks.build.dependsOn tasks.jibBuildTar
