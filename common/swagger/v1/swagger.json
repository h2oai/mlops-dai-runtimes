{
  "swagger": "2.0",
  "info": {
    "description": "This is a definition of the REST API for scoring from H2O. This API is intended to be used within DAI and eventually across all H2O scoring systems",
    "version": "1.2.0",
    "title": "Scoring API - v1",
    "termsOfService": "",
    "contact": {
      "email": "support@h2o.ai"
    },
    "license": {
      "name": "License",
      "url": "http://www.h2o.ai"
    }
  },
  "host": "localhost",
  "basePath": "/",
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/model/id": {
      "get": {
        "tags": [
          "metadata"
        ],
        "summary": "Returns model id",
        "description": "Returns unique id of the model loaded in the server and used for scoring",
        "operationId": "getModelId",
        "produces": [
          "text/plain"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "string"
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/model/schema": {
      "get": {
        "tags": [
          "metadata"
        ],
        "summary": "Describe a model",
        "description": "Returns information about the model used for scoring, e.g., input schema.",
        "operationId": "getModelInfo",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Model"
            }
          }
        }
      }
    },
    "/model/sample_request": {
      "get": {
        "tags": [
          "metadata"
        ],
        "summary": "Sample scoring request",
        "description": "Builds a sample scoring request that would pass all validations",
        "operationId": "getSampleRequest",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/ScoreRequest"
            }
          }
        }
      }
    },
    "/model/capabilities": {
      "get": {
        "tags": [
          "metadata"
        ],
        "summary": "List capabilities supported by the scorer.",
        "description": "Returns the capabilities supported by the scorer.",
        "operationId": "getCapabilities",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CapabilityType"
              }
            }
          }
        }
      }
    },
    "/model/score": {
      "post": {
        "tags": [
          "scoring"
        ],
        "summary": "Score on given rows",
        "description": "Computes score of the rows sent in the body of the post request",
        "operationId": "getScore",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ScoreRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/ScoreResponse"
            }
          },
          "400": {
            "description": "Invalid payload"
          }
        }
      },
      "get": {
        "tags": [
          "scoring"
        ],
        "summary": "Score on given file",
        "description": "Computes score of the rows in the file specified by the path in the query parameter",
        "operationId": "getScoreByFile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "file",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/ScoreResponse"
            }
          },
          "400": {
            "description": "Invalid payload"
          }
        }
      }
    },
    "/model/contribution": {
      "post": {
        "tags": [
          "contribution"
        ],
        "summary": "Contribution score or Shapley values on given rows",
        "description": "Computes contribution score with the rows sent in the body of the post request",
        "operationId": "getContribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContributionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/ContributionResponse"
            }
          },
          "400": {
            "description": "Invalid payload"
          },
          "501": {
            "description": "Implementation not supported"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "definitions": {
    "Model": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "properties": {
          "type": "object",
          "properties": {
            "scoringType": {
              "type": "string",
              "$ref": "#/definitions/ScoringType"
            },
            "scoringResponLabels": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "schema": {
          "$ref": "#/definitions/ModelSchema"
        }
      }
    },
    "Row": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "PredictionInterval": {
      "type": "object",
      "properties": {
        "fields": {
          "$ref": "#/definitions/Row"
        },
        "rows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Row"
          }
        }
      }
    },
    "ContributionRequest": {
      "type": "object",
      "required": [
        "requestShapleyValueType"
      ],
      "properties": {
        "requestShapleyValueType": {
          "description": "The string to say what type of Shap values are needed. `ORIGINAL` implies Shap values of original features are requested, `TRANSFORMED` implies that Shap values of transformed features are requested.\n",
          "$ref": "#/definitions/ShapleyType"
        },
        "fields": {
          "description": "An array holding the names of fields in the order of appearance in the `rows` property. The length of `fields` has to match length of each row in `rows`. No duplicates are allowed.\n",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "rows": {
          "description": "An array of rows consisting the actual input data for scoring, one scoring request per row.\n",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Row"
          }
        }
      }
    },
    "ContributionResponse": {
      "type": "object",
      "properties": {
        "features": {
          "description": "An array holding the names of fields in the order of appearance in the rows of the  `contributions` property.\n",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributionGroups": {
          "description": "An array of rows consisting of the shapley contributions output corresponding to an output group.\n",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContributionGroup"
          }
        }
      }
    },
    "ContributionGroup": {
      "type": "object",
      "properties": {
        "outputGroup": {
          "description": "Name of the output group. It will be populated only for multinomial models. Shapley values are not supported for third party models yet, hence this field will not be populated.\n",
          "type": "string"
        },
        "contributions": {
          "description": "An array of rows consisting of the shapley contributions output corresponding to columns in the fields\n",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Row"
          }
        }
      }
    },
    "ScoreRequest": {
      "type": "object",
      "properties": {
        "requestShapleyValueType": {
          "description": "The string to say what type of Shap values are needed. `ORIGINAL` implies Shap values of original features are requested, `TRANSFORMED` implies that Shap values of transformed features are requested.\n",
          "$ref": "#/definitions/ShapleyType"
        },
        "includeFieldsInOutput": {
          "description": "An array holding the list of field names to be copied from the input request row to the corresponding scoring output. It is an error to specify a field name not present in the `fields` property, except when it is equal to the `idField` property. In the latter case, the row id would be generated and returned in the response. Note that the order of items in `includeFieldsInOutput` is ignored and the specified fields are returned in the order of appearance in the input request row.\n",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "noFieldNamesInOutput": {
          "description": "If set to `true`. The scorer will not fill response column names in the `fields` field. This is can be useful to maintain compatibility with older scorer versions or to save bandwidth.\n",
          "type": "boolean"
        },
        "idField": {
          "description": "Name of the field that holds a row id, e.g., a value that uniquely identifies each row of the request. The caller may specify a name of the field that is not present in fields. In which case, the scorer is allowed to generate a UUID to identify each row (e.g., for logging and monitoring purposes). To retrieve such a generated id as a part of the response, simply name it in the `includeFieldsInOutput`.\n",
          "type": "string"
        },
        "fields": {
          "description": "An array holding the names of fields in the order of appearance in the `rows` property. The length of `fields` has to match length of each row in `rows`. No duplicates are allowed.\n",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "rows": {
          "description": "An array of rows consisting the actual input data for scoring, one scoring request per row.\n",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Row"
          }
        },
        "requestPredictionIntervals": {
          "type": "boolean",
          "description": "If set to `true`, the scorer will try to fill field `predictionIntervals` in response if it is supported.\n"
        }
      }
    },
    "ScoreResponse": {
      "type": "object",
      "properties": {
        "id": {
          "description": "A unique id of the model used for scoring.\n",
          "type": "string"
        },
        "fields": {
          "description": "An array holding the names of fields in the order of appearance in the rows of the  `score` property. This field is not populated if requested by setting the `noFieldNamesInOutput` request field to `true`.\n",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "score": {
          "description": "An array of rows consisting the actual scoring output. The order of rows corresponds to the order of the input request rows. Each row contains any copied input fields first (in the order of appearance in the input row). If the `idField` was specified and also listed in the `includeFieldsInOutput` but not provided in `fields`, a unique id will be generated and positioned right after all the other fields copied from the input. The scoring output follows.\n",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Row"
          }
        },
        "featureShapleyContributions": {
          "type": "object",
          "description": "An object with features and shapley values that was requested by the client. This field will not be populated if the Shapley values are not available for a model.\n",
          "$ref": "#/definitions/ContributionResponse"
        },
        "predictionIntervals": {
          "type": "object",
          "description": "Prediction interval consist of an array of interval bound names and rows of array of bounds per bound name. Setting `requestPredictionIntervals` to true will enable populating the field. The field will be empty or an error response returned if prediction intervals are not returned or supported by the model.\n",
          "$ref": "#/definitions/PredictionInterval"
        }
      }
    },
    "DataField": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "dataType": {
          "type": "string",
          "enum": [
            "Bool",
            "Int32",
            "Int64",
            "Float32",
            "Float64",
            "Str",
            "Time64"
          ]
        },
        "example": {
          "type": "string"
        }
      }
    },
    "ModelSchema": {
      "type": "object",
      "properties": {
        "inputFields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataField"
          }
        },
        "targetFields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataField"
          }
        },
        "outputFields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataField"
          }
        }
      }
    },
    "ShapleyType": {
      "type": "string",
      "enum": [
        "ORIGINAL",
        "TRANSFORMED",
        "NONE"
      ]
    },
    "ScoringType": {
      "type": "string",
      "enum": [
        "REGRESSION",
        "CLASSIFICATION",
        "BINOMIAL"
      ]
    },
    "CapabilityType": {
      "type": "string",
      "enum": [
        "SCORE",
        "SCORE_PREDICTION_INTERVAL",
        "CONTRIBUTION_ORIGINAL",
        "CONTRIBUTION_TRANSFORMED",
        "MEDIA",
        "TEST_TIME_AUGMENTATION"
      ]
    }
  }
}