name: Extract Current Commit Hash, Release version and Gradle Component version

on:
  workflow_call:
    outputs:
      commit_hash:
        description: "Commit hash"
        value: ${{ jobs.setup_env.outputs.commit_hash }}
      release_base_version:
        description: "Release base version, such as 1.2"
        value: ${{ jobs.setup_env.outputs.release_base_version }}
      release_version:
        description: "Release version, such as 1.2.3"
        value: ${{ jobs.setup_env.outputs.release_version }}
      component_version:
        description: "Gradle component version, such as 1.2.3"
        value: ${{ jobs.setup_env.outputs.component_version }}
      bypass_changed_files:
        description: "True whether we should run all jobs regardless of changed files output"
        value: ${{ jobs.setup_env.outputs.bypass_changed_files }}
      sanitized_branch_name:
        description: "Branch name where / is replaced by -"
        value: ${{ jobs.setup_env.outputs.sanitized_branch_name }}

jobs:
  setup_env:
    name: Extract commit hash and release version
    runs-on: ubuntu-latest
    outputs:
      commit_hash: ${{ steps.commit_hash.outputs.sha }}
      release_base_version: ${{ steps.release_base_version.outputs.version }}
      release_version: ${{ steps.release_version.outputs.version }}
      component_version: ${{ steps.component_version.outputs.version }}
      sanitized_branch_name: ${{ steps.sanitized_branch_name.outputs.name }}
      bypass_changed_files: ${{ steps.bypass_changed_files.outputs.bypass }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Save Github Commit Hash
        id: commit_hash
        run: |
          if ${{ github.event_name == 'pull_request' }}; then echo "sha=${{ github.event.pull_request.head.sha }}" >> $GITHUB_OUTPUT; fi
          if ${{ github.event_name == 'push' }}; then echo "sha=${{ github.sha }}" >> $GITHUB_OUTPUT; fi
          if ${{ github.event_name == 'workflow_dispatch' }}; then echo "sha=$(git rev-parse --short=7 "$GITHUB_SHA")" >> $GITHUB_OUTPUT; fi

      - name: Save Github Release Base Version
        id: release_base_version
        if: startsWith(github.ref, 'refs/heads/release/')
        run: |
          github_ref="${{ github.ref }}"
          echo "version=${github_ref#refs/heads/release/}" >> $GITHUB_OUTPUT

      - name: Save Github Release Version
        id: release_version
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          github_ref="${{ github.ref }}"
          echo "version=${github_ref#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Check if we should by pass changed files
        id: bypass_changed_files
        run: |
          if [[ "${{ github.event.created }}" == "true" &&  "$GITHUB_REF" == refs/heads/release/* ]]; then
            echo "Release branch has been created, by-passing changed files ..."
            bypass='true'
          elif [[ "$GITHUB_REF" == refs/tags/v* ]]; then
            echo "Release tag has been pushed, by-passing changed files ..."
            bypass='true'
          else
            bypass='false'
          fi
          echo "bypass=$bypass" >> $GITHUB_OUTPUT

      - name: Save Component Version
        id: component_version
        run: |
          if [[ "$GITHUB_REF" == refs/heads/main ]]; then
            version="0.0.0-main.${{ steps.commit_hash.outputs.sha }}"
          elif [[ "$GITHUB_REF" == refs/heads/release/* ]]; then
            version="${{ steps.release_base_version.outputs.version }}-rel.${{ steps.commit_hash.outputs.sha }}"
          elif [[ "$GITHUB_REF" == refs/tags/v* ]]; then
            version="${{ steps.release_version.outputs.version }}"
          else
            version=0.0.0-pr.${{ steps.commit_hash.outputs.sha }}
          fi
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Save Sanitized Branch Name
        id: sanitized_branch_name
        run: |
          name=$(echo $(git rev-parse --abbrev-ref HEAD) | sed -r 's/\//-/g')
          echo "name=$name" >> $GITHUB_OUTPUT
